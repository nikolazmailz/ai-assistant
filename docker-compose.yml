services:
  postgres:
    image: postgres:16
    container_name: ai-assistant-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: ${TZ}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - pgbackups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [app-net]

  app:
    build: .
    container_name: ai-assistant-app
    environment:
      TZ: ${TZ}
      TG_BOT_TOKEN: ${TG_BOT_TOKEN}
      TG_WEBHOOK_SECRET: ${TG_WEBHOOK_SECRET}
      OPENAI_TOKEN: ${OPENAI_TOKEN}
      PROXY_HOST: ${PROXY_HOST}
      PROXY_PORT: ${PROXY_PORT}
      PROXY_USER: ${PROXY_USER}
      PROXY_PASSWORD: ${PROXY_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      R2DBC_URL: ${R2DBC_URL}
      JDBC_URL: ${JDBC_URL}
    restart: unless-stopped
    expose:
      - "8080"
    networks: [app-net]

  nginx:
    image: nginx:1.27-alpine
    container_name: ai-assistant-nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx/certs:/etc/nginx/certs:ro
    networks: [app-net]

networks:
  app-net:
    external: true
    name: ai-assistant_app-net